"""
Django settings for coolsite project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
#Файл settings.py является одним из основных файлов настроек в Django. Он содержит множество переменных настроек, которые определяют поведение вашего Django-проекта.



import os #для взаимодействия с операционной системой
from pathlib import Path #для работы с путями файловой системы

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent # это переменная, содержащая путь к базовой директории проекта в Django
# BASE_DIR используется для установки базового пути для других файлов и директорий в проекте, таких как база данных, статические файлы, шаблоны и т. д.
# 1. __file__ - это специальная переменная в Python, которая содержит путь к текущему файлу, в котором она используется.
# 2. Path(__file__) - здесь мы создаем объект класса Path из модуля pathlib,
# передавая ему значение __file__. Таким образом, мы создаем объект Path, представляющий путь к текущему файлу.
# 3. resolve() - это метод объекта Path, который приводит путь к его абсолютному виду. Он разрешает любые символические ссылки, включая ссылки на родительские директории.
# 4. parent - это свойство объекта Path, которое возвращает родительскую директорию пути.
# 5. .parent - второе использование parent относится к родительской директории родительской директории, то есть к дедушке директории текущего файла.


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-1!@6&ic+c#t))u^p2%7am&1f1!p0wfr3d^#_y(7ixa38vjbmy&'
# используется в Django для хранения секретного ключа приложения.
# Секретный ключ используется для обеспечения безопасности различных функций Django, таких как шифрование сессий,
# защита от подделки межсайтовых запросов (CSRF) и других механизмов безопасности.

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True  # режиме отладки

ALLOWED_HOSTS = ['127.0.0.1']
# список допустимых хостов (доменных имен или IP-адресов), которые могут обслуживать ваше приложение Django.

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin', # интерфейс для управл данными
    'django.contrib.auth', # приложение аутентификации пользователей
    'django.contrib.contenttypes', # приложение управления типами контента, позволяет создавать и управлять типами контента
    'django.contrib.sessions', #управление сессиями, обеспечивает возможность работы сессий пользователей, таких как хранение и передача данных между запросами
    'django.contrib.messages', # позволяет передавать временные сообщения пользователю, такие как уведомления об успешных операциях или ошибках.
    'django.contrib.staticfiles', # для обработки статических файлов в Django. Оно обеспечивает удобные функции для обслуживания статических файлов,
    # таких как CSS, JavaScript, изображения и другие.
    'debug_toolbar', # Приложение инструментов отладки Django. Оно предоставляет интерактивную панель отладки, которая помогает разработчикам
    # анализировать и отслеживать запросы, базу данных, шаблоны и другие аспекты приложения во время разработки.
    'captcha', # Оно предоставляет средства для генерации и проверки CAPTCHA, что может быть полезным для защиты форм от автоматизированных спам-ботов.
    'film.apps.FilmConfig' # Приложение "film", которое определено в модуле apps.py внутри пакета "film". Это ваше собственное приложение.
    # FilmConfig - это класс конфигурации приложения, который определяет настройки и поведение вашего приложения.
]
# список установленных приложений в вашем проекте

MIDDLEWARE = [ #позволяет нам вмешиваться в процесс обработки запросов и ответов.
    'debug_toolbar.middleware.DebugToolbarMiddleware', #Middleware для отладочной панели инструментов Django. Этот middleware включает функциональность отладочной панели инструментов, которая помогает анализировать и отслеживать запросы, базу данных, шаблоны и другие аспекты приложения во время разработки.
    'django.middleware.security.SecurityMiddleware', #Middleware для обеспечения безопасности в Django. Он выполняет различные операции для защиты приложения от известных уязвимостей, таких как внедрение скриптов и сессионные атаки.
    'django.contrib.sessions.middleware.SessionMiddleware', #Middleware для управления сессиями Django. Он добавляет поддержку сессий в нашем приложении, позволяя хранить и передавать данные между запросами.
    'django.middleware.common.CommonMiddleware', #Общее middleware Django. Он выполняет различные операции, такие как обработка URL-префиксов, установка заголовков ответов и многое другое.
    'django.middleware.csrf.CsrfViewMiddleware', #Middleware для защиты от CSRF-атак (межсайтовой подделки запроса). Он генерирует и проверяет CSRF-токены в формах, чтобы предотвратить возможность подделки запросов.
    'django.contrib.auth.middleware.AuthenticationMiddleware',  #Middleware для аутентификации пользователей Django. Он добавляет функциональность аутентификации, позволяя идентифицировать пользователей и управлять их сеансами.
    'django.contrib.messages.middleware.MessageMiddleware', #Middleware для управления сообщениями Django. Он обрабатывает временные сообщения, которые можно передавать между запросами.
    'django.middleware.clickjacking.XFrameOptionsMiddleware', #Middleware для защиты от атак кликджекинга (clickjacking). Он устанавливает заголовок X-Frame-Options, который ограничивает встраивание страниц вашего приложения во фреймы на других сайтах.
]

ROOT_URLCONF = 'coolsite.urls' #  указывает корневой URL-конфигурационный модуль для вашего проекта.

TEMPLATES = [ #определяет настройки шаблонов для нашего проекта. В шаблонах Django мы определяем структуру и содержание HTML-страниц
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # содержит список словарей, каждый из которых определяет настройки для одного движка шаблонов (template engine). В данном случае используется стандартный движок шаблонов Django
        'DIRS': [os.path.join(BASE_DIR, 'templates')], #  Это список директорий, в которых Django будет искать шаблоны. В данном случае используется os.path.join(BASE_DIR, 'templates'), чтобы указать директорию "templates" в корневой директории проекта (BASE_DIR). Здесь вы можете указать другие директории, если у вас есть нестандартные местоположения для шаблонов.
        'APP_DIRS': True, # сли установлено значение True, Django будет автоматически искать шаблоны в директориях приложений. Это означает, что Django будет искать шаблоны в директориях с именем "templates" внутри каждого установленного приложения. Если ваше приложение имеет собственные шаблоны, вы можете создать директорию "templates" внутри приложения и разместить шаблоны в ней.
        'OPTIONS': {
            #Это словарь с дополнительными настройками шаблонов. В данном случае используются контекстные процессоры ('context_processors'), которые предоставляют контекстные переменные для шаблонов. Например, 'django.template.context_processors.debug' добавляет переменную debug в контекст, которая указывает, находится ли проект в режиме отладки. А 'django.template.context_processors.request' добавляет переменную request в контекст, которая представляет текущий объект запроса. Другие контекстные процессоры также могут добавлять свои переменные в контекст.
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'coolsite.wsgi.application' # указывает WSGI-приложение, которое будет использоваться для обслуживания вашего проекта Django.
# WSGI (Web Server Gateway Interface) - это стандартный интерфейс между веб-серверами и веб-приложениями на Python. WSGI-приложение является основой для работы вашего проекта Django с веб-сервером.
# Указывая 'coolsite.wsgi.application' в WSGI_APPLICATION, мы сообщаем Django, где находится ваше WSGI-приложение, чтобы он мог использовать его для обслуживания вашего проекта.

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    #это переменная настройки в Django, которая определяет конфигурацию базы данных для вашего проекта.
    #DATABASES содержит словарь с одним ключом 'default', который определяет настройки для основной базы данных вашего проекта.
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        #Это определяет тип базы данных, которую вы будете использовать. В данном случае используется 'django.db.backends.sqlite3', что указывает на использование базы данных SQLite.
        'NAME': BASE_DIR / 'db.sqlite3',
        #Это путь к файлу базы данных. В данном случае используется BASE_DIR / 'db.sqlite3', что означает использование файла db.sqlite3, расположенного в корневой директории проекта (BASE_DIR).
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    # это переменная настройки в Django, которая определяет список валидаторов паролей, которые будут применяться при создании или изменении пароля пользователей.
    #  AUTH_PASSWORD_VALIDATORS содержит список словарей, где каждый словарь определяет отдельный валидатор паролей.
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', #Проверяет, насколько похож пароль на атрибуты пользователя, такие как имя пользователя или электронная почта. Это помогает предотвратить использование слишком предсказуемых паролей.
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', #Проверяет минимальную длину пароля. По умолчанию минимальная длина составляет 8 символов, но вы можете настроить ее в своих настройках проекта.
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', #Проверяет, не является ли пароль одним из распространенных и легко угадываемых паролей. Django предоставляет встроенный список распространенных паролей, но вы также можете настроить свой собственный список.
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', #Проверяет, содержит ли пароль хотя бы одну цифру. Это помогает обеспечить наличие хотя бы некоторой сложности в пароле.
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ru' #определяет язык, используемый для локализации нашего проекта.

TIME_ZONE = 'UTC' # определяет временную зону, используемую в нашем проекте.

USE_I18N = True # Django предоставляет инструменты для перевода текстовых элементов вашего приложения на различные языки. Вы можете использовать функции перевода для перевода строковых сообщений, меток полей форм, названий кнопок и других текстовых элементов.
USE_TZ = True # Django использует временную зону, указанную в настройке TIME_ZONE, чтобы интерпретировать и хранить временные данные в базе данных.

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
# Статические файлы в Django включают такие ресурсы, как CSS-файлы, JavaScript-файлы, изображения и другие файлы, которые не изменяются в процессе работы приложения.

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
# Определяет тип автоматического поля (AutoField) по умолчанию для моделей базы данных.
# Автоматическое поле (AutoField) в Django используется для автоматической генерации уникальных идентификаторов (ID) для записей в базе данных

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'
#  путь к каталогу, в котором хранятся медиафайлы


STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
# определяет URL-префикс для доступа к статическим файлам вашего проекта.
# определяет путь к каталогу, в котором будут собраны статические файлы для развертывания вашего проекта.

STATICFILES_DIRS = []
# определяет список дополнительных каталогов, в которых могут находиться статические файлы вашего проекта.Например, это может быть каталог assets, содержащий общие CSS-файлы, JavaScript-файлы или изображения.


LOGIN_REDIRECT_URL = '/'
#определяет URL-адрес, на который будет перенаправлен пользователь после успешного входа в систему.
#установлен в '/, что означает, что после успешного входа в систему пользователь будет перенаправлен на главную страницу вашего сайта.


INTERNAL_IPS = [
    '127.0.0.1',
]
# определяет список IP-адресов, с которых разрешен доступ к панели отладки (debug toolbar) и другим отладочным инструментам при разработке вашего проекта.


CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'coolsite_cache'),
    }
}
# определяет конфигурацию кэша для вашего проекта.
# CACHES установлен для использования файлового кэша (FileBasedCache). Это означает, что кэшированные данные будут сохраняться в файловой системе.
# cловарь 'default' определяет конфигурацию для кэша по умолчанию. В данном случае, 'BACKEND' установлен как 'django.core.cache.backends.filebased.FileBasedCache', что указывает использовать файловый кэш.
# 'LOCATION' определяет путь к каталогу, где будут храниться кэшированные данные.'LOCATION' установлен как os.path.join(BASE_DIR, 'coolsite_cache'), что означает, что каталог coolsite_cache будет создан внутри корневого каталога нашего проекта для хранения кэшированных данных.
# Кэширование - это механизм, который помогает ускорить работу вашего приложения, сохраняя некоторые вычисленные или полученные данные в памяти или на диске. В Django вы можете использовать кэширование, например, для кэширования результатов запросов к базе данных или долгих вычислений.